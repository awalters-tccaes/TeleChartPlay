@page "/gojs"


<PageTitle>GOJS</PageTitle>

<h1>GOJS</h1>

<script id="code">
    var modelJson = {
        "class": "go.GraphLinksModel",
        "nodeDataArray": [
            { "key": 0, "type": "Cloud", "loc": "0 0", "text": "Internet" },
            { "key": 1, "type": "Firewall", "loc": "100 0" },
            { "key": 2, "type": "Router", "loc": "200 0" },
            { "key": 3, "type": "Server", "loc": "300 0" },
            { "key": 4, "type": "Switch", "loc": "200 100" },
            { "key": 5, "type": "Firewall", "loc": "25 100" },
            { "key": 6, "type": "Router", "loc": "25 200" },
            { "key": 7, "type": "Switch", "loc": "400 100" },

            { "key": 10, "isGroup": true, "text": "Intranet 1" },
            { "key": 11, "type": "PC", "loc": "150 220", "group": 10 },
            { "key": 12, "type": "PC", "loc": "250 220", "group": 10 },
            { "key": 13, "type": "PC", "loc": "150 270", "group": 10 },
            { "key": 14, "type": "PC", "loc": "250 270", "group": 10 },

            { "key": 20, "isGroup": true, "text": "Intranet 2" },
            { "key": 21, "type": "PC", "loc": "350 220", "group": 20 },
            { "key": 22, "type": "PC", "loc": "450 220", "group": 20 },
            { "key": 23, "type": "PC", "loc": "350 270", "group": 20 },
            { "key": 24, "type": "PC", "loc": "450 270", "group": 20 },

            { "key": 30, "isGroup": true, "text": "Isolation test" },
            { "key": 31, "type": "PC", "loc": "-100 172", "group": 30 },
            { "key": 32, "type": "PC", "loc": "-100 242", "group": 30 }
        ],
        "linkDataArray": [
            { "from": 0, "to": 1 },
            { "from": 1, "to": 2 },
            { "from": 2, "to": 3 },
            { "from": 2, "to": 4 },
            { "from": 5, "to": 4 },
            { "from": 5, "to": 6 },
            { "from": 4, "to": 7 },
            { "from": 4, "to": 10 },
            { "from": 7, "to": 20 },
            { "from": 6, "to": 30 }
        ]
    };
    var myDiagram;
    var myPalette;

    function init() {
        myDiagram = new go.Diagram('myDiagramDiv', {
            'commandHandler.archetypeGroupData': { isGroup: true, text: 'Subnet' },
            'undoManager.isEnabled': true
        }); // enable undo & redo

        myDiagram.nodeTemplate = new go.Node('Spot', {
            locationSpot: go.Spot.Center,
            locationObjectName: 'BODY',
            selectionObjectName: 'BODY'
        })
            .bindTwoWay('location', 'loc', go.Point.parse, go.Point.stringify)
            .add(
                new go.Picture({
                    name: 'BODY',
                    width: 50,
                    height: 50,
                    portId: '',
                    fromLinkable: true,
                    toLinkable: true,
                    cursor: 'pointer'
                }).bind('source', 'type', (t) => `images/network/${t.toLowerCase()}.svg`),
                new go.Shape({
                    width: 25,
                    height: 25,
                    fill: 'transparent',
                    strokeWidth: 0
                })
            );

        myDiagram.groupTemplate = new go.Group('Vertical', {
            locationSpot: go.Spot.Center,
            padding: 5 // to push the port out
        })
            .add(
                new go.TextBlock({
                    alignment: go.Spot.Left,
                    font: '12px georgia',
                    editable: true
                }).bindTwoWay('text'),
                new go.Panel('Auto')
                    .add(
                        new go.Shape('RoundedRectangle', {
                            strokeDashArray: [2, 6],
                            stroke: '#333',
                            fill: 'rgba(0,0,0,0)'
                        }),
                        new go.Placeholder({ padding: 5 })
                    )
            );

        myPalette = new go.Palette('myPaletteDiv', {
            nodeTemplateMap: myDiagram.nodeTemplateMap,
            layout: new go.GridLayout({
                cellSize: new go.Size(2, 2),
                isViewportSized: true
            })
        });

        myPalette.model.nodeDataArray = [{ type: 'Cloud' }, { type: 'Firewall' }, { type: 'Switch' }, { type: 'Server' }, { type: 'Router' }, { type: 'PC' }];

        myDiagram.linkTemplate = new go.Link({
            routing: go.Routing.Orthogonal,
            fromSpot: go.Spot.AllSides,
            toSpot: go.Spot.AllSides,
            relinkableFrom: true,
            relinkableTo: true
        })
            .add(new go.Shape({ strokeWidth: 1.5, stroke: 'red' }))
            .add(new go.Shape({ strokeWidth: 0, fill: 'red', scale: 0.7, fromArrow: 'circle' }))
            .add(new go.Shape({ strokeWidth: 0, fill: 'red', scale: 0.7, toArrow: 'circle' }));

        load();
    }

    function save() {
        const json = modelJson;
        json.innerHTML = myDiagram.model.toJson();
        myDiagram.isModified = false;
        if (window.Prism) window.Prism.highlightAll();
    }

    function load() {
        const json = modelJson;
        myDiagram.model && myDiagram.model = go.Model.fromJson(json);
    }

    window.addEventListener('DOMContentLoaded', init);
    
    load();

</script>



NETWORK CHART HERE:

<div style="width: 100%; display: flex; justify-content: space-between">
    <!-- The DIV for the Diagram needs an explicit size or else we won't see anything.
       This also adds a border to help see the edges of the viewport. -->
    <div id="myPaletteDiv" style="width: 100px; margin-right: 2px; border: solid 1px black"></div>
    <div id="myDiagramDiv" style="border: solid 1px black; flex-grow: 1; height: 450px"></div>
</div>